{"version":3,"sources":["logo.svg","BeforeAfter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Score","props","style","fontSize","color","score","nq","AnswerStatus","isCorrect","text","MyQuestion","c","order","localeCompare","number","Game","state","isBefore","mynum","answer","answerStatusText","numQuestions","handleAnswerChange","bind","handleAnswerSubmit","generateNewQuestion","this","nameInput","focus","r","Math","floor","random","b","setState","mscore","String","fromCodePoint","event","target","value","comp","autoFocus","type","maxLength","size","onChange","ref","input","onClick","disabled","React","Component","NameForm","isInitialized","handleChange","handleSubmit","preventDefault","onSubmit","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5752cde1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React from 'react';\nfunction Score(props)\n{\n  return(<text style={{fontSize:40}}> Your score is : <span style={{color:'orange'}}>{props.score}/{props.nq}</span> </text>);\n  \n}\nfunction AnswerStatus(props)\n{\n  let c;\n  let fsize={fontSize:40};\n  if(props.isCorrect)\n    {\n      c = {color:'green'};\n      \n    }\n  else\n    {\n      c={color:'red'};\n      \n    }\n  return(<text style={c,fsize}> {props.text} </text>);\n}\n\nfunction MyQuestion(props)\n{\n \n let c; \n let fsize={fontSize:40}; if(props.order.localeCompare(\"before\"))\n    {\n      c={color:'magenta'};\n      \n    }\n  else\n    {\n      c={color:'cyan'};\n        \n      \n    }\n  return (<text style={fsize}> What comes  <span style={c}>{props.order} </span> {props.number}?\n      </text>);\n      \n    \n}\n\nclass Game extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state={isBefore:true, mynum: 2, answer:'', isCorrect:false, answerStatusText:'',score: 0,numQuestions: 1,}\n    this.handleAnswerChange=this.handleAnswerChange.bind(this);\n    this.handleAnswerSubmit=this.handleAnswerSubmit.bind(this);\n    this.generateNewQuestion=this.generateNewQuestion.bind(this);\n  };\n  \n  componentDidMount(){\n    this.nameInput.focus();\n  }\n  componentDidUpdate(){\n    this.nameInput.focus();\n  }\n  generateNewQuestion()\n  {\n    const nq = this.state.numQuestions+1;\n    let r = Math.floor(Math.random()*99+1);\n    let b = (Math.random()<0.5);\n    this.setState({isBefore:b,mynum:r,answerStatusText:'',answer:'', isCorrect: false,numQuestions: nq,});\n  }\n  handleAnswerSubmit()\n  {\n    const mscore=this.state.score;\n    \n    if((this.state.isBefore && this.state.answer== this.state.mynum-1) || (!this.state.isBefore && this.state.answer==this.state.mynum+1)) {this.setState({isCorrect:true,answerStatusText:String.fromCodePoint(\"0x1F913\"), score: mscore+1,})}\n    else {this.setState({isCorrect:false,answerStatusText:String.fromCodePoint(\"0x1F62D\")})}\n  }\n  \n  handleAnswerChange(event)\n  {\n    this.setState({answer:event.target.value});\n  }\n  \n  render()\n  {\n    let comp = this.state.isBefore? 'before':'after';\n    return(\n      <div>\n        <Score score={this.state.score} nq={this.state.numQuestions}/> <br/>\n        <MyQuestion order={comp} number={this.state.mynum} />\n      <input autoFocus style={{fontSize:40}} type=\"text\" maxLength=\"2\" size=\"2\" value={this.state.answer} onChange={this.handleAnswerChange} \n        ref={(input) => { this.nameInput = input; }} />\n   <AnswerStatus isCorrect={this.state.isCorrect} text={this.state.answerStatusText}/>\n        \n        <br/>\n        <button style={{fontSize:40}} onClick={this.handleAnswerSubmit} disabled={this.state.isCorrect}>\n          Submit </button>\n        <button  style={{fontSize:40}} onClick={this.generateNewQuestion}> Play another </button>\n        </div>);\n    \n  }\n  \n}\n\nclass NameForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: '', isInitialized: false,};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n   // alert('A name was submitted: ' + this.state.value);\n    this.setState({isInitialized:true});\n    event.preventDefault();\n  }\n\n  render() {\n    if(this.state.isInitialized)\n      return(\n        <div><h1> Hello, {this.state.value}!</h1> \n      <Game/></div>);\n    else\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange}\n            \n            />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    );\n  }\n}\n\nexport default NameForm;\n\n/*\nReactDOM.render(\n  <NameForm />,\n  document.getElementById('root')\n);\n*/\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NameForm from './BeforeAfter'\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\nfunction App() {\n\n\treturn ( <NameForm />);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}